# -*- coding: utf-8 -*-
"""
We Given a profile matrix Profile, we can evaluate the probability of every k-mer in a string Text and find a Profile-most probable k-mer in Text, i.e., a k-mer that was most likely to have been generated by Profile. For example, ACGGGGATTACC is the Profile-most probable 12-mer in GGTACGGGGATTACCT. Indeed, every other 12-mer in this string has probability 0.

Profile-most Probable k-mer Problem: Find a Profile-most probable k-mer in a string.
     Input: A string Text, an integer k, and a k Ã— 4 matrix Profile.
     Output: A Profile-most probable k-mer in Text.

CODE CHALLENGE: Solve the Profile-most Probable k-mer Problem.

Sample Input:
     ACCTGTTTATTGCCTAAGTTCCGAACAAACCCAATATAGCCCGAGGGCCT
     5
     A C G T
     0.2 0.4 0.3 0.1
     0.2 0.3 0.3 0.2
     0.3 0.1 0.5 0.1
     0.2 0.5 0.2 0.1
     0.3 0.1 0.4 0.2

Sample Output:
     CCGAG
@author: zhihuixie
"""
import itertools
def all_pattern(genome, k, num_mismatch):    #function to generate all pattern with k-mer
    pattern=[]
    allpattern1=[]
    while k-num_mismatch<len(genome):
          pattern.append(genome[0:k-num_mismatch])
          genome=genome[1:]  #move to find next seq
    for item2 in pattern:
        i=0
        while i<=len(item2):
            for e in new_list:
                temp=item2[:i]+e+item2[i:]
                if temp not in allpattern1:
                    allpattern1.append(temp)
            i+=1
    return allpattern1
def Profile_most(genome, k, num_mismatch):
    allpattern = all_pattern(genome, k, num_mismatch)
    maxpr= 0
    prstring = {}
    for pattern in allpattern:
        totalpr = 1
        #print pattern
        for i in range (0, len(pattern)):
            
            temp = Nt_pr[pattern[i]]
            #print pattern[i],temp
            totalpr = totalpr * temp[i]
        prstring[pattern] = totalpr
        if totalpr > maxpr:
            maxpr = totalpr
    for pattern1 in prstring:
        if prstring[pattern1] == maxpr:
            print pattern1
  
array = []
with open("7_3.txt", "r") as r:
    genome = (r.readline()).translate(None, '\n')
    k = int((r.readline()).translate(None, '\n'))
    Nt = (r.readline()).translate(None, '\n')
    
    for line in r:
        array.append(line.translate(None, '\n'))
pr = [num.split() for num in array]
print genome
Nt_pr = {}
A,C,G,T = [], [], [], []
for n in range(0, len(pr)):
    A.append(float(pr[n][0]))
    C.append(float(pr[n][1]))
    G.append(float(pr[n][2]))
    T.append(float(pr[n][3]))
    
Nt_pr[Nt[0]] = A
Nt_pr[Nt[2]] = C
Nt_pr[Nt[4]] = G
Nt_pr[Nt[6]] = T

print Nt_pr

#array = ['AAATTGACGCAT', 'GACGACCACGTT', 'CGTCAGCGCCTG', 'GCTGAGCACCGG', 'AGTACGGGACAG']
#k=6
num_mismatch=0
new_list = [''.join(item) for item in itertools.product('ATCG', repeat=num_mismatch)]
Profile_most(genome, k, num_mismatch)
#print find_pattern(array, 'ATA', num_mismatch)